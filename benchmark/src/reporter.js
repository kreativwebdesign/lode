import * as math from "mathjs";
import { calculateNinetyFiveConfidenceInterval } from "./stats.js";

const ROUNDING_PRECISION = 3;

const round = (number) => {
  return math.round(number, ROUNDING_PRECISION);
};

export const calculateFigure = (reports, selector) => {
  const optimizedValues = reports.map(({ optimizedReport }) =>
    selector(optimizedReport)
  );
  const baselineValues = reports.map(({ baselineReport }) =>
    selector(baselineReport)
  );

  const optimizedMean = round(math.mean(optimizedValues));
  const baselineMean = round(math.mean(baselineValues)); // 100%

  const optimizedPercentage = (optimizedMean / baselineMean) * 100;
  const optimizedDifference = round(optimizedPercentage - 100);

  return {
    difference: optimizedDifference,
    optimized: {
      mean: optimizedMean,
      standardDeviation: round(math.std(optimizedValues)),
    },
    baseline: {
      mean: baselineMean,
      standardDeviation: round(math.std(baselineValues)),
    },
  };
};

/**
 * Generates a report for all samples.
 * @param {*} reports list of reports generated by the samples.
 */
export const generateHolisticReport = (reports) => {
  const {
    difference: medianFpsDifference,
    optimized: {
      mean: optimizedMedianFpsMean,
      standardDeviation: optimizedMedianFpsDeviation,
    },
    baseline: {
      mean: baselineMedianFpsMean,
      standardDeviation: baselineMedianFpsDeviation,
    },
  } = calculateFigure(reports, (report) => report.medianFps);

  const {
    upper: optimizedUpper,
    lower: optimizedLower,
  } = calculateNinetyFiveConfidenceInterval({
    mean: optimizedMedianFpsMean,
    standardDeviation: optimizedMedianFpsDeviation,
    samples: reports.length,
  });

  const {
    upper: baselineUpper,
    lower: baselineLower,
  } = calculateNinetyFiveConfidenceInterval({
    mean: baselineMedianFpsMean,
    standardDeviation: baselineMedianFpsDeviation,
    samples: reports.length,
  });

  const gpuTotalTime = calculateFigure(
    reports,
    (report) => report.gpuTotalTime
  );

  const totalGpuEvents = calculateFigure(
    reports,
    (report) => report.debug.totalGpuEvents
  );

  const totalModelLoadDuration = calculateFigure(
    reports,
    (report) => report.debug.totalModelLoadDuration
  );

  const totalRenders = calculateFigure(
    reports,
    (report) => report.debug.totalRenders
  );

  const medianRenderLoopDuration = calculateFigure(
    reports,
    (report) => report.debug.medianRenderLoopDuration
  );

  return {
    optimizedMedianFpsMean,
    optimizedMedianFpsDeviation,
    optimizedLower: round(optimizedLower),
    optimizedUpper: round(optimizedUpper),

    baselineMedianFpsMean,
    baselineMedianFpsDeviation,
    baselineLower: round(baselineLower),
    baselineUpper: round(baselineUpper),

    medianFpsDifference,

    gpuTotalTime,
    medianRenderLoopDuration,
    totalGpuEvents,
    totalModelLoadDuration,
    totalRenders,
  };
};

export const reportFormatted = (
  iterations,
  {
    optimizedMedianFpsMean,
    optimizedMedianFpsDeviation,
    optimizedLower,
    optimizedUpper,
    baselineMedianFpsMean,
    baselineMedianFpsDeviation,
    baselineLower,
    baselineUpper,
    gpuTotalTime,
    medianRenderLoopDuration,
    totalGpuEvents,
    totalModelLoadDuration,
    totalRenders,
  }
) => {
  console.log(
    `report for ${iterations} iterations, performed on ${new Date()}:`
  );

  console.log(`
optimized fps: ${optimizedMedianFpsMean} (${optimizedMedianFpsDeviation} standard deviation)
the value is with a confidence of 95% between ${optimizedLower} and ${optimizedUpper}
baseline fps: ${baselineMedianFpsMean} (${baselineMedianFpsDeviation} standard deviation)
the value is with a confidence of 95% between ${baselineLower} and ${baselineUpper}
`);

  console.log(`
further information for interpreting data:
`);

  const logReportSection = (sectionName, data) => {
    console.log(`${sectionName}:
optimized: ${data.optimized.mean} (${data.optimized.standardDeviation} standard deviation)
baseline: ${data.baseline.mean} (${data.baseline.standardDeviation} standard deviation)`);
  };

  logReportSection("gpuTotalTime", gpuTotalTime);
  logReportSection("medianRenderLoopDuration", medianRenderLoopDuration);
  logReportSection("totalGpuEvents", totalGpuEvents);
  logReportSection("totalModelLoadDuration", totalModelLoadDuration);
  logReportSection("totalRenders", totalRenders);
};
