import * as math from "mathjs";
import { calculateNinetyFiveConfidenceInterval } from "./stats.js";

const ROUNDING_PRECISION = 3;

export const calculateFigure = (reports, selector) => {
  const optimizedValues = reports.map(({ optimizedReport }) =>
    selector(optimizedReport)
  );
  const baselineValues = reports.map(({ baselineReport }) =>
    selector(baselineReport)
  );

  return {
    optimizedMean: math.mean(optimizedValues),
    optimizedVariance: math.variance(optimizedValues),
    baselineMean: math.mean(baselineValues),
    baselineVariance: math.variance(baselineValues),
  };
};

const round = (number) => {
  return math.round(number, ROUNDING_PRECISION);
};

/**
 * Generates a report for all samples.
 * @param {*} reports list of reports generated by the samples.
 */
export const generateHolisticReport = (reports) => {
  const {
    optimizedMean: optimizedMedianFpsMean,
    optimizedVariance: optimizedMedianFpsVariance,
    baselineMean: baselineMedianFpsMean,
    baselineVariance: baselineMedianFpsVariance,
  } = calculateFigure(reports, (report) => report.medianFps);

  const {
    upper: optimizedUpper,
    lower: optimizedLower,
  } = calculateNinetyFiveConfidenceInterval({
    mean: optimizedMedianFpsMean,
    variance: optimizedMedianFpsVariance,
    samples: reports.length,
  });

  const {
    upper: baselineUpper,
    lower: baselineLower,
  } = calculateNinetyFiveConfidenceInterval({
    mean: baselineMedianFpsMean,
    variance: baselineMedianFpsVariance,
    samples: reports.length,
  });

  const {
    optimizedMean: optimizedGpuTotalTimeMean,
    optimizedVariance: optimizedGpuTotalTimeVariance,
    baselineMean: baselineGpuTotalTimeMean,
    baselineVariance: baselineGpuTotalTimeVariance,
  } = calculateFigure(reports, (report) => report.gpuTotalTime);

  const {
    optimizedMean: optimizedTotalGpuEventsMean,
    optimizedVariance: optimizedTotalGpuEventsVariance,
    baselineMean: baselineTotalGpuEventsMean,
    baselineVariance: baselineTotalGpuEventsVariance,
  } = calculateFigure(reports, (report) => report.debug.totalGpuEvents);

  const {
    optimizedMean: optimizedTotalModelLoadDurationMean,
    optimizedVariance: optimizedTotalModelLoadDurationVariance,
    baselineMean: baselineTotalModelLoadDurationMean,
    baselineVariance: baselineTotalModelLoadDurationVariance,
  } = calculateFigure(reports, (report) => report.debug.totalModelLoadDuration);

  const {
    optimizedMean: optimizedTotalRendersMean,
    optimizedVariance: optimizedTotalRendersVariance,
    baselineMean: baselineTotalRendersMean,
    baselineVariance: baselineTotalRendersVariance,
  } = calculateFigure(reports, (report) => report.debug.totalRenders);

  const {
    optimizedMean: optimizedMedianRenderLoopDurationMean,
    optimizedVariance: optimizedMedianRenderLoopDurationVariance,
    baselineMean: baselineMedianRenderLoopDurationMean,
    baselineVariance: baselineMedianRenderLoopDurationVariance,
  } = calculateFigure(
    reports,
    (report) => report.debug.medianRenderLoopDuration
  );

  return {
    optimizedMedianFpsMean: round(optimizedMedianFpsMean),
    optimizedMedianFpsVariance: round(optimizedMedianFpsVariance),
    optimizedLower: round(optimizedLower),
    optimizedUpper: round(optimizedUpper),

    baselineMedianFpsMean: round(baselineMedianFpsMean),
    baselineMedianFpsVariance: round(baselineMedianFpsVariance),
    baselineLower: round(baselineLower),
    baselineUpper: round(baselineUpper),

    optimizedGpuTotalTimeMean: round(optimizedGpuTotalTimeMean),
    optimizedGpuTotalTimeVariance: round(optimizedGpuTotalTimeVariance),

    baselineGpuTotalTimeMean: round(baselineGpuTotalTimeMean),
    baselineGpuTotalTimeVariance: round(baselineGpuTotalTimeVariance),

    optimizedTotalGpuEventsMean: round(optimizedTotalGpuEventsMean),
    optimizedTotalGpuEventsVariance: round(optimizedTotalGpuEventsVariance),
    baselineTotalGpuEventsMean: round(baselineTotalGpuEventsMean),
    baselineTotalGpuEventsVariance: round(baselineTotalGpuEventsVariance),

    optimizedTotalModelLoadDurationMean: round(
      optimizedTotalModelLoadDurationMean
    ),
    optimizedTotalModelLoadDurationVariance: round(
      optimizedTotalModelLoadDurationVariance
    ),
    baselineTotalModelLoadDurationMean: round(
      baselineTotalModelLoadDurationMean
    ),
    baselineTotalModelLoadDurationVariance: round(
      baselineTotalModelLoadDurationVariance
    ),

    optimizedTotalRendersMean: round(optimizedTotalRendersMean),
    optimizedTotalRendersVariance: round(optimizedTotalRendersVariance),
    baselineTotalRendersMean: round(baselineTotalRendersMean),
    baselineTotalRendersVariance: round(baselineTotalRendersVariance),

    optimizedMedianRenderLoopDurationMean: round(
      optimizedMedianRenderLoopDurationMean
    ),
    optimizedMedianRenderLoopDurationVariance: round(
      optimizedMedianRenderLoopDurationVariance
    ),
    baselineMedianRenderLoopDurationMean: round(
      baselineMedianRenderLoopDurationMean
    ),
    baselineMedianRenderLoopDurationVariance: round(
      baselineMedianRenderLoopDurationVariance
    ),
  };
};
