import * as math from "mathjs";
import { calculateNinetyFiveConfidenceInterval } from "./stats.js";

const ROUNDING_PRECISION = 3;

const round = (number) => {
  return math.round(number, ROUNDING_PRECISION);
};

export const calculateFigure = (reports, selector) => {
  const optimizedValues = reports.map(({ optimizedReport }) =>
    selector(optimizedReport)
  );
  const baselineValues = reports.map(({ baselineReport }) =>
    selector(baselineReport)
  );

  return {
    optimized: {
      mean: round(math.mean(optimizedValues)),
      standardDeviation: round(math.std(optimizedValues)),
    },
    baseline: {
      mean: round(math.mean(baselineValues)),
      standardDeviation: round(math.std(baselineValues)),
    },
  };
};

/**
 * Generates a report for all samples.
 * @param {*} reports list of reports generated by the samples.
 */
export const generateHolisticReport = (reports) => {
  const {
    optimized: {
      mean: optimizedMedianFpsMean,
      standardDeviation: optimizedMedianFpsDeviation,
    },
    baseline: {
      mean: baselineMedianFpsMean,
      standardDeviation: baselineMedianFpsDeviation,
    },
  } = calculateFigure(reports, (report) => report.medianFps);

  const {
    upper: optimizedUpper,
    lower: optimizedLower,
  } = calculateNinetyFiveConfidenceInterval({
    mean: optimizedMedianFpsMean,
    standardDeviation: optimizedMedianFpsDeviation,
    samples: reports.length,
  });

  const {
    upper: baselineUpper,
    lower: baselineLower,
  } = calculateNinetyFiveConfidenceInterval({
    mean: baselineMedianFpsMean,
    standardDeviation: baselineMedianFpsDeviation,
    samples: reports.length,
  });

  const gpuTotalTime = calculateFigure(
    reports,
    (report) => report.gpuTotalTime
  );

  const totalGpuEvents = calculateFigure(
    reports,
    (report) => report.debug.totalGpuEvents
  );

  const totalModelLoadDuration = calculateFigure(
    reports,
    (report) => report.debug.totalModelLoadDuration
  );

  const totalRenders = calculateFigure(
    reports,
    (report) => report.debug.totalRenders
  );

  const medianRenderLoopDuration = calculateFigure(
    reports,
    (report) => report.debug.medianRenderLoopDuration
  );

  return {
    optimizedMedianFpsMean,
    optimizedMedianFpsDeviation,
    optimizedLower: round(optimizedLower),
    optimizedUpper: round(optimizedUpper),

    baselineMedianFpsMean,
    baselineMedianFpsDeviation,
    baselineLower: round(baselineLower),
    baselineUpper: round(baselineUpper),

    gpuTotalTime,
    medianRenderLoopDuration,
    totalGpuEvents,
    totalModelLoadDuration,
    totalRenders,
  };
};
