import * as math from "mathjs";
import { calculateNinetyFiveConfidenceInterval } from "./stats.js";

export const calculateFigure = (reports, selector) => {
  const optimizedValues = reports.map(({ optimizedReport }) =>
    selector(optimizedReport)
  );
  const baselineValues = reports.map(({ baselineReport }) =>
    selector(baselineReport)
  );

  return {
    optimizedMean: math.mean(optimizedValues),
    optimizedVariance: math.variance(optimizedValues),
    baselineMean: math.mean(baselineValues),
    baselineVariance: math.variance(baselineValues),
  };
};

/**
 * Generates a report for all samples.
 * @param {*} reports list of reports generated by the samples.
 */
export const generateHolisticReport = (reports) => {
  const {
    optimizedMean: optimizedMedianFpsMean,
    optimizedVariance: optimizedMedianFpsVariance,
    baselineMean: baselineMedianFpsMean,
    baselineVariance: baselineMedianFpsVariance,
  } = calculateFigure(reports, (report) => report.medianFps);

  const {
    upper: optimizedUpper,
    lower: optimizedLower,
  } = calculateNinetyFiveConfidenceInterval({
    mean: optimizedMedianFpsMean,
    variance: optimizedMedianFpsVariance,
    samples: reports.length,
  });

  const {
    upper: baselineUpper,
    lower: baselineLower,
  } = calculateNinetyFiveConfidenceInterval({
    mean: baselineMedianFpsMean,
    variance: baselineMedianFpsVariance,
    samples: reports.length,
  });

  const {
    optimizedMean: optimizedGpuTotalTimeMean,
    optimizedVariance: optimizedGpuTotalTimeVariance,
    baselineMean: baselineGpuTotalTimeMean,
    baselineVariance: baselineGpuTotalTimeVariance,
  } = calculateFigure(reports, (report) => report.gpuTotalTime);

  const {
    optimizedMean: optimizedTotalGpuEventsMean,
    optimizedVariance: optimizedTotalGpuEventsVariance,
    baselineMean: baselineTotalGpuEventsMean,
    baselineVariance: baselineTotalGpuEventsVariance,
  } = calculateFigure(reports, (report) => report.debug.totalGpuEvents);

  const {
    optimizedMean: optimizedTotalModelLoadDurationMean,
    optimizedVariance: optimizedTotalModelLoadDurationVariance,
    baselineMean: baselineTotalModelLoadDurationMean,
    baselineVariance: baselineTotalModelLoadDurationVariance,
  } = calculateFigure(reports, (report) => report.debug.totalModelLoadDuration);

  const {
    optimizedMean: optimizedTotalRendersMean,
    optimizedVariance: optimizedTotalRendersVariance,
    baselineMean: baselineTotalRendersMean,
    baselineVariance: baselineTotalRendersVariance,
  } = calculateFigure(reports, (report) => report.debug.totalRenders);

  const {
    optimizedMean: optimizedMedianRenderLoopDurationMean,
    optimizedVariance: optimizedMedianRenderLoopDurationVariance,
    baselineMean: baselineMedianRenderLoopDurationMean,
    baselineVariance: baselineMedianRenderLoopDurationVariance,
  } = calculateFigure(
    reports,
    (report) => report.debug.medianRenderLoopDuration
  );

  const precision = 3;

  return {
    optimizedMedianFpsMean: math.round(optimizedMedianFpsMean, precision),
    optimizedMedianFpsVariance: math.round(
      optimizedMedianFpsVariance,
      precision
    ),
    optimizedLower: math.round(optimizedLower, precision),
    optimizedUpper: math.round(optimizedUpper, precision),

    baselineMedianFpsMean: math.round(baselineMedianFpsMean, precision),
    baselineMedianFpsVariance: math.round(baselineMedianFpsVariance, precision),
    baselineLower: math.round(baselineLower, precision),
    baselineUpper: math.round(baselineUpper, precision),

    optimizedGpuTotalTimeMean: math.round(optimizedGpuTotalTimeMean, precision),
    optimizedGpuTotalTimeVariance: math.round(
      optimizedGpuTotalTimeVariance,
      precision
    ),

    baselineGpuTotalTimeMean: math.round(baselineGpuTotalTimeMean, precision),
    baselineGpuTotalTimeVariance: math.round(
      baselineGpuTotalTimeVariance,
      precision
    ),

    optimizedTotalGpuEventsMean: math.round(
      optimizedTotalGpuEventsMean,
      precision
    ),
    optimizedTotalGpuEventsVariance: math.round(
      optimizedTotalGpuEventsVariance,
      precision
    ),
    baselineTotalGpuEventsMean: math.round(
      baselineTotalGpuEventsMean,
      precision
    ),
    baselineTotalGpuEventsVariance: math.round(
      baselineTotalGpuEventsVariance,
      precision
    ),

    optimizedTotalModelLoadDurationMean: math.round(
      optimizedTotalModelLoadDurationMean,
      precision
    ),
    optimizedTotalModelLoadDurationVariance: math.round(
      optimizedTotalModelLoadDurationVariance,
      precision
    ),
    baselineTotalModelLoadDurationMean: math.round(
      baselineTotalModelLoadDurationMean,
      precision
    ),
    baselineTotalModelLoadDurationVariance: math.round(
      baselineTotalModelLoadDurationVariance,
      precision
    ),

    optimizedTotalRendersMean: math.round(optimizedTotalRendersMean, precision),
    optimizedTotalRendersVariance: math.round(
      optimizedTotalRendersVariance,
      precision
    ),
    baselineTotalRendersMean: math.round(baselineTotalRendersMean, precision),
    baselineTotalRendersVariance: math.round(
      baselineTotalRendersVariance,
      precision
    ),

    optimizedMedianRenderLoopDurationMean: math.round(
      optimizedMedianRenderLoopDurationMean,
      precision
    ),
    optimizedMedianRenderLoopDurationVariance: math.round(
      optimizedMedianRenderLoopDurationVariance,
      precision
    ),
    baselineMedianRenderLoopDurationMean: math.round(
      baselineMedianRenderLoopDurationMean,
      precision
    ),
    baselineMedianRenderLoopDurationVariance: math.round(
      baselineMedianRenderLoopDurationVariance,
      precision
    ),
  };
};
