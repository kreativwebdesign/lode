import * as math from "mathjs";
import { calculateNinetyFiveConfidenceInterval } from "./stats.js";

/**
 * Generates a report for all samples.
 * @param {*} reports list of reports generated by the samples.
 */
export const generateHolisticReport = (reports) => {
  const optimizedMedianFps = reports.map(
    ({ optimizedReport: { medianFps } }) => medianFps
  );
  const baselineMedianFps = reports.map(
    ({ baselineReport: { medianFps } }) => medianFps
  );
  const optimizedMedianFpsMean = math.mean(optimizedMedianFps);
  const optimizedMedianFpsVariance = math.variance(optimizedMedianFps);
  const baselineMedianFpsMean = math.mean(baselineMedianFps);
  const baselineMedianFpsVariance = math.variance(baselineMedianFps);

  const optimizedGpuTotalTime = reports.map(
    ({ optimizedReport: { gpuTotalTime } }) => gpuTotalTime
  );
  const baselineGpuTotalTime = reports.map(
    ({ baselineReport: { gpuTotalTime } }) => gpuTotalTime
  );

  const {
    upper: optimizedUpper,
    lower: optimizedLower,
  } = calculateNinetyFiveConfidenceInterval({
    mean: optimizedMedianFpsMean,
    variance: optimizedMedianFpsVariance,
    samples: reports.length,
  });

  const {
    upper: baselineUpper,
    lower: baselineLower,
  } = calculateNinetyFiveConfidenceInterval({
    mean: baselineMedianFpsMean,
    variance: baselineMedianFpsVariance,
    samples: reports.length,
  });

  const optimizedGpuTotalTimeMean = math.mean(optimizedGpuTotalTime);
  const optimizedGpuTotalTimeVariance = math.variance(optimizedGpuTotalTime);
  const baselineGpuTotalTimeMean = math.mean(baselineGpuTotalTime);
  const baselineGpuTotalTimeVariance = math.variance(baselineGpuTotalTime);

  const precision = 3;

  return {
    optimizedMedianFpsMean: math.round(optimizedMedianFpsMean, precision),
    optimizedMedianFpsVariance: math.round(
      optimizedMedianFpsVariance,
      precision
    ),
    optimizedLower: math.round(optimizedLower, precision),
    optimizedUpper: math.round(optimizedUpper, precision),

    baselineMedianFpsMean: math.round(baselineMedianFpsMean, precision),
    baselineMedianFpsVariance: math.round(baselineMedianFpsVariance, precision),
    baselineLower: math.round(baselineLower, precision),
    baselineUpper: math.round(baselineUpper, precision),

    optimizedGpuTotalTimeMean: math.round(optimizedGpuTotalTimeMean, precision),
    optimizedGpuTotalTimeVariance: math.round(
      optimizedGpuTotalTimeVariance,
      precision
    ),

    baselineGpuTotalTimeMean: math.round(baselineGpuTotalTimeMean, precision),
    baselineGpuTotalTimeVariance: math.round(
      baselineGpuTotalTimeVariance,
      precision
    ),
  };
};
